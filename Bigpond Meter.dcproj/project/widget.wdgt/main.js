/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt and all other licences.
 
 You may modify for personal use.
 */

// Properties set by attributes panel
var specmsg="";
var updateInterval;

// Monitor objects (see CommandMonitor.js)
var ioMonitor;
var monitorsRunning;

//
// Function: initMonitor()
// Called by load() when widget starts up to set up and start the monitors
//
var showb=0;
function forceupdate()
{
    ioMonitor.stop();
    ioMonitor.start();
}
var msgggra="Login First";
function loadsettings()
{
 
    var username = widget.preferenceForKey(dashcode.createInstancePreferenceKey("username"));
    var password = widget.preferenceForKey(dashcode.createInstancePreferenceKey("password"));
    showb=0;
    if(username==null){username="example@bigpond.com";showb=1;}
    if(username=="example@bigpond.com"){showb=1;}
    
    if(password==null)
    {
        password=""; 
        showb=1;

    }
    var showss=widget.preferenceForKey(dashcode.createInstancePreferenceKey("graph"));

    document.getElementById("username").value=username; 
    document.getElementById("password").value=password;
    if(showss=="" || showss==null)
    {
        showss="no";
    }
    if(showss=="yes")
    {
        msgggra="";
        showTray(true);
    }
    ioMonitor.commandLine = "./bigpondconnect " +username+" "+password;
    
    
    
}
function savesettings(user,pass)
{
    widget.setPreferenceForKey(user, dashcode.createInstancePreferenceKey("username"));
    widget.setPreferenceForKey(pass, dashcode.createInstancePreferenceKey("password"));
    loadsettings();
}
var waituserpass;
function WrongPasswordDanger()
{
    waituserpass=1;
    ioMonitor.stop();
    monitorsRunning = false;
}
var doneButtonPressed = function(value)
{
    showFront(value);
    if(waituserpass==1)
    {
        waituserpass=0;
        ioMonitor.start();
        setInterval(forceupdate,1000*60*60);//every hour
        monitorsRunning = true;
        setERRORValue(0);
    }
    
}
 var setERRORValue = function (value)
 {
 if(value){
    document.getElementById("ind").style.opacity=0;
    }
  setElementText("lasttxt","");
    if(value==1)
    {
        setElementText("etxt", "ERROR");
    }
    else if(value==9)
    {
        var my_date = new Date();
        var ampm = "am";
        var hrs = my_date.getHours();
        mintxt=""+ my_date.getMinutes();
        if(my_date.getMinutes()<10)
        {
            mintxt="0"+my_date.getMinutes();
        }
        if(hrs>=12)
        {
            ampm="pm";
            hrs-=12;
        }
        
        if(hrs==0){hrs=12;}
       
        setElementText("lasttxt",hrs+":"+mintxt+" "+ampm);
        setElementText("etxt", "");
        
    }
    else if(value==5)
    {
        setElementText("etxt", "ERR: TIMED OUT!");
    }
     else if(value==23)
    {
        setElementText("etxt", specmsg);
    }
      else if(value==88)
    {
        setElementText("etxt", "Latin Response??");
    }
      else if(value==89)
    {
        setElementText("etxt", "Wrong Response");
    }
      else if(value==99)
    {
        setElementText("etxt", "No Response??");
    }
        else if(value==33)
    {
        setElementText("etxt", "Please Login");waituserpass=1;
    }
       else if(value==98)
    {
        setElementText("etxt", "No Data??");
    }
    else if(value==67)
    {
          setElementText("etxt", "Empty Reply??");
    }
      else if(value==56)
    {
          setElementText("etxt", "HTTPS Error??");
    }
    else if(value==10)
    {
         setElementText("etxt", "Account Locked for 20 mins");
    }
    else if(value==11)
    {
         setElementText("etxt", "Wrong Password");
         WrongPasswordDanger();
    }
    else if(value==14)
    {
        setElementText("etxt", "Could Not Connect");
    }
    else if(value==0)
    {
         setElementText("etxt", "");
    }
    else
    {
         setElementText("etxt", "Unknown error");
    }
};
var usedmb=0;
var totoall=0;
function initMonitors()
{
    // Set up the load/IO monitor
    var trackIOValues = makeMaxTracker(
        function (value, max)
        {
            setGaugeValue("gauge2", value);
            setElementText("btxt", "BILLING PERIOD: "+value+"%");
            var excesspercent=(100*usedmb/totoall)-value;
            setElementText("text3","You are "+Math.abs(Math.round(excesspercent))+"% ("+Math.abs(Math.round(excesspercent*totoall/100))+" MB) "+((excesspercent>=0)?"ahead":"behind")+" of time");
        });

    var setLoadValue = function (value) {
        setGaugeValue("gauge1", value);
        setElementText("usedtxt", "USED: "+usedmb+" MB - (" + value +"%)");
    };
    var setFreeValue = function (value) {
        setElementText("freetxt", "FREE: "+value + " MB");
        totoall=value+usedmb;
    };
      var setUsedValue = function (value) {
      usedmb=value;
    };

     

    ioMonitor = new IOStatMonitor(updateInterval, trackIOValues, setLoadValue,setFreeValue,setUsedValue,setERRORValue,jscall);
   
    loadsettings();
     if(showb==1)
    {
    
        waituserpass=1;
        setTimeout(function(){showBack();username.focus();username.select()},1000);
    }
    else
    {
        waituserpass=0;
        ioMonitor.start();
        monitorsRunning = true;
    }
    setERRORValue(0);
}

//
// Function: makeMaxTracker(callback, min, valuesToTrack)
// Creates a function that tracks the maximum value seen recently to
// allow gague values to be automatically scaled
//
// callback: Your function that will be called with (value, max) parameters
// min: Clamp values less than this to min (default 1.0)
// valuesToTrack: How much history to keep (default 60 values)
//
// Return the tracker function
//
function makeMaxTracker(callback, min, valuesToTrack)
{
    if (valuesToTrack == null) {
        valuesToTrack = 60;
    }

    if (min == null) {
        min = 1.0;
    }

    var trackValues = new Array();

    var tracker = function (value)
    {
        trackValues.push(value);
        if (trackValues.length > valuesToTrack) {
            trackValues.shift();
        }

        var max = min;
        for (var i = 0; i < trackValues.length; i++) {
            if (trackValues[i] > max) {
                max = trackValues[i];
            }
        }

        callback(value, max);
    };

    return tracker;
}
var ctx=null;
var graphdata={
def:true,
used:[]
};
var tx=0;
var graphsel=-1;
function safeeval(x)
{
     if(window.JSON)
     {
        if(window.JSON.parse)
        {
        try{
            return window.JSON.parse(x);
            }catch(ex){return false;}
            return false;
        }
     }
     return false;
     alert("unsafe eval");
    if(/pass/.test(x))
    {
        return false;
    }
   return false;
   // return eval("("+x+")");

}
var y=30;
var canvasel=null;

    var width,height;
    function calcsum()
    {
    var i=0;
    var count=0;
    graphdata.sum=[];
    for(i=0;i<graphdata.used.length;i++)
    {
        count+=graphdata.used[i];
        graphdata.sum.push(count);
    }



    }
    function pushgraph(g)
    {
    graphdata=safeeval(g);
    if(!graphdata.sum)
    {
        calcsum();
    }
        drawGraph();
    
    }
    var tmp="t";
    function jscall(str)
    {
    tmp=str;
    pushgraph(str);
    
    }
var debug = function(x){graphdata.date.push("20 Mar 2010");graphdata.used.push(312);graphdata.download.push(512);graphdata.unmetered.push(343);graphdata.upload.push(30);graphdata.sum.push(x)};
function drawGraph()
{
    if(ctx==null)
    {
        canvasel=document.getElementById("canvas");
        width=canvasel.width;
        height=107;
        if(canvasel.getContext)
        {
            ctx=canvasel.getContext("2d");
        }
    }
    if(ctx!=null)
    {
          if(!graphdata.sum)
    {
        calcsum();
    }
    
        ctx.clearRect(0,0,canvasel.width,canvasel.height);
        ctx.strokeStyle="white";
        
       ctx.font="8pt 'Lucida Grande',sans-serif";
       ctx.fillStyle="white";
       var cangraph=graphdata.used.length>0;
       if(!cangraph)
       {
        if(graphdata.def)
        {
        
        ctx.fillText(msgggra,0,20);
        }else
        {
        ctx.fillText("Sorry, The graph is not supported for",0,20);
        ctx.fillText("accounts with your usage meter page.",0,20+12);
        
        ctx.fillText("Please visit http://url2.tk/8 and tell me.",0,20+36);
        }
        return;
       }
       var fullmb=totoall;
      
        ctx.beginPath();
        var xstep=width/32;
        ctx.moveTo(0,0);
        var scale=height/fullmb;
        
            
        ctx.fillStyle="rgba(255,255,255,0.3)";
        var x=0;
        var i=0;
         ctx.lineWidth=0.25;
         for(i=7;x<width;i+=7)
        {
            //draw vertical lines for each week
            ctx.strokeStyle="white";
            x=xstep*i;
            ctx.moveTo(x,0);
            ctx.lineTo(x,height);
            ctx.stroke();
            
    
    }
 ctx.lineWidth=3;


        
        x=0;
        ctx.moveTo(0,height);
        for(i=0;i<graphdata.sum.length;i++)
        {
            ctx.lineTo(x,height-graphdata.sum[i]*scale);
            x+=xstep;
        }
        ctx.lineTo(x-xstep,height);
        ctx.closePath();
        ctx.fill();
        x=0;
        ctx.beginPath();
        
        ctx.moveTo(x,height);
        for(i=0;i<graphdata.sum.length;i++)
        {
            ctx.lineTo(x,height-graphdata.sum[i]*scale);
            x+=xstep;
        }
        
        ctx.stroke();
        ctx.fillStyle="white";
        var showit=true;
        if(graphsel!=-1 && graphsel<graphdata.used.length)
        {
            ctx.beginPath();
            ctx.arc(xstep*graphsel,height-scale*graphdata.sum[graphsel], 5, 0, Math.PI*2, true); 
            
            ctx.closePath();
            ctx.fill();
            
            /*
            
            
used:[1826,1527,2391],
date:["13 Mar 2010","14 Mar 2010","15 Mar 2010"],
download:[1456,1317,2214],
upload:[371,210,177],
unmetered:[51,29,23]
*/

            ctx.fillStyle="white";
            var left=graphsel>17;
            if(left)
            {
            showit=false;
         }
         
       ctx.font="12pt 'Lucida Grande',sans-serif";
       if(left){
       ctx.translate(-175,0);}
       var xo=width-120;
       if(graphdata.sum.length>18)
        {
            ctx.fillStyle="rgba(0,0,0,0.6)";
            ctx.fillRect(172,33,124,37);
            
            ctx.fillStyle="white";
            }
            
       if(left)
       {
        ctx.fillText(graphdata.date[graphsel],175,18);
       }
       else
       {
        
            ctx.fillText(graphdata.date[graphsel],width-ctx.measureText(graphdata.date[graphsel]).width,18);
            }
            if(left)
            {
            
            ctx.fillText(graphdata.used[graphsel] + "MB",175,32)
            
            }else
            {
            ctx.fillText(graphdata.used[graphsel] + "MB",width-ctx.measureText(graphdata.used[graphsel] + "MB").width,32);
            
            }
            
       ctx.font="8pt 'Lucida Grande',sans-serif";
            ctx.fillText("Download:",xo,42);
            ctx.fillText("Upload:",xo,54);
            ctx.fillText("Unmetered:",xo,66);
            
            ctx.fillText(graphdata.download[graphsel]+" MB",width-ctx.measureText(graphdata.download[graphsel]+" MB").width,42);
            
            ctx.fillText(graphdata.upload[graphsel]+" MB",width-ctx.measureText(graphdata.upload[graphsel]+" MB").width,54);
            
            ctx.fillText(graphdata.unmetered[graphsel]+" MB",width-ctx.measureText(graphdata.unmetered[graphsel]+" MB").width,66);
            if(left){
            ctx.translate(175,0);}
        }
        else
        {
            graphsel=-1;
        }
        if(showit)
        {
         ctx.fillText(fullmb/2000+" GB",0,height/2);
         }
    }
}
var trayshow=false;
function toggleTray()
{
    showTray(trayshow=!trayshow);
}
function showTray(showit)
{
    if(showit)
    {
        drawGraph();
    }
    widget.setPreferenceForKey(showit?"yes":"no", dashcode.createInstancePreferenceKey("graph"));
    document.getElementById("trayh").style.opacity=showit?1:0;
    document.getElementById("trayh").style.top=showit?"95px":"0px";
   
}
//
// Function: setElementText(elementName, elementValue)
// Set the text contents of an HTML div
//
// elementName: Name of the element in the DOM
// elementValue: Text to display in the element
//
function setElementText(elementName, elementValue)
{
    var element = document.getElementById(elementName);
    if (element) {
        element.innerText = elementValue;
    }
}

//
// Function: setGaugeValue(gaugeId, value)
// Sets the value of one of the monitor gauges
//
// gaugeId: Gauge to set
// value: Value to set gauge to
//
var maxw=287;
function setGaugeValue (gaugeId, nvalue)
{
    var value=nvalue;
    if(value>100)
    {
        value=100;
    }
    if(gaugeId=="gauge1")
    {
        document.getElementById("b1").style.width=value*maxw/100+"px";
        document.getElementById("b1").getElementsByTagName("img")[0].src=(value>=90)?"Images/r.png":((value>=75)?"Images/y.png":"Images/g.png");
    }
    else if(gaugeId=="gauge2")
    {
        document.getElementById("b2").style.width=value*maxw/100+"px";
    }
    return;
    var element = document.getElementById(gaugeId);
    if (element != null && element.object != null && element.object.setValue != null) {
        element.object.setValue(value);
    }
}

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();

    // Get the properties
    updateInterval = +attributes.updateInterval;
    if (!updateInterval) {
        updateInterval = 1;
    }

    // Set up command monitors
    initMonitors();
   
    showb=0;
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
     widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("username"));
     widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("password"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop monitor timers to prevent CPU usage
    if (monitorsRunning) {
        ioMonitor.stop();
        monitorsRunning = false;
    }
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
    if (monitorsRunning === false) {
        ioMonitor.start();
        monitorsRunning = true;
    }
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    showb=0;
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display="none";
    back.style.display="block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
setERRORValue(0);
var nusername = document.getElementById("username").value;
var npassword = document.getElementById("password").value;
savesettings(nusername,npassword);
    loadsettings();
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget)
{
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function devsite(event)
{
    if (window.widget) {
    //the user clicked "Widget Info"
		widget.openURL("http://aantthony.github.com/BigPond-Usage-Meter/widget.html");
	}
}
function updsite(event)
{
    if (window.widget) {
    //the user clicked "v.1.9"
		widget.openURL("http://aantthony.github.com/BigPond-Usage-Meter/widget.html");
	}
}


function passwordBTN(event)
{
    if(event.which==13)
    {
        doneButtonPressed(event);
    }
}


function openbig(event)
{
if(window.widget)
{
    widget.openURL("https://my.bigpond.com/mybigpond/myaccount/myusage/daily/default.do");
       
}
return false;
    if (window.widget) {
        var html='<!DOCTYPE html><html><head></head><body><div style="display:none"><form id="loginform" action="https://signon.bigpond.com/login?goto=https%3A%2F%2Fmy.bigpond.com%3A443%2Fmybigpond%2Fmyaccount%2Fmyusage%2Fdaily%2Fdefault.do" method="POST"><input name="goto" value="https://my.bigpond.com:443/mybigpond/myaccount/myusage/daily/default.do" /><input name="encoded" value="false" /><input name="gx_charset" value="UTF-8" /><input name="username" id="loginusername" value="'+escape("username.value")+'" /><input name="password" id="loginpassword" type="password" value="'+escape("password.value")+'" /></div><script type="text/javascript">loginform.submit();</script></body></html>';

//alert(html);
//widget.system("echo '"+html+"' >file.html",null);
//widget.system("open file.html",function(){});
//setTimeout(function(){
//widget.system("rm -f file.html",null);},15000);

		//widget.openURL("https://my.bigpond.com/mybigpond/myaccount/myusage/daily/default.do");
       // html=escape(html);
       // var url='data:text/html;charset=utf-8,'+html;
       // alert(url);
       // widget.openURL(url);
    }
}


function mmv(event)
{
    if(event.layerX)
    {
        graphsel=Math.round(event.layerX/(width/32));
        
        drawGraph();
    }
}


function selte(event){graphsel=-1;drawGraph();}
